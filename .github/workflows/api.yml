name: api

on:
  workflow_dispatch:
   inputs:
      repoName:
        type: string
        description: Type the name of the new repo.
      hasDB:
        type: boolean
        description: Will it have automated deployment for Databases?

jobs:
  repo_create:
    runs-on: ubuntu-latest
    steps:
      - name: create_repo
        id: create_repo
        uses: indiesdev/curl@v1.1
        with:
          url: https://api.github.com/repos/bromba-noesis/template/generate
          method: "POST"
          accept: 201
          headers: '{ "Accept": "application/vnd.github+json", "X-GitHub-Api-Version": "2022-11-28" }'
          bearer-token: ${{ secrets.BROMBA_NOESIS_PAT2 }}
          body: '{ "name": ${{ github.event.inputs.repoName }}, "include_all_branches": true, "private": false }'
          log-response: false
          timeout: 3000

  repo_config:
    runs-on: ubuntu-latest
    needs: repo_create
    steps:
      - name: set_var
        id: set_var
        uses: indiesdev/curl@v1.1
        if: ${{ github.event.inputs.hasDB == 'true' }}
        with:
          url: https://api.github.com/repos/bromba-noesis/${{ github.event.inputs.repoName }}/actions/variables
          method: "POST"
          accept: 201
          headers: '{ "Accept": "application/vnd.github+json", "X-GitHub-Api-Version": "2022-11-28" }'
          bearer-token: ${{ secrets.BROMBA_NOESIS_PAT2 }}
          body: '{ "name": "HAS_DB", "value": "true" }'
          log-response: false
    
      - name: create_qua_env
        id: create_qua_env
        uses: indiesdev/curl@v1.1
        with:
          url: https://api.github.com/repos/bromba-noesis/${{ github.event.inputs.repoName }}/environments/Quality
          method: "PUT"
          accept: 200, 422
          headers: '{ "Accept": "application/vnd.github+json", "X-GitHub-Api-Version": "2022-11-28" }'
          bearer-token: ${{ secrets.BROMBA_NOESIS_PAT2 }}
          body: '{ "reviewers":[{"type":"User","id":126766083}], "deployment_branch_policy":{"protected_branches":false,"custom_branch_policies":true} }'    # find user id here: https://caius.github.io/github_id/
          log-response: false
          
      #- name: create_qua_env_response
      #  run: |
      #    set +x
      #    echo ${{ steps.create_qua_env.outputs.response }} 
      
      #- name: create_qua_env_parsed_response
      #  run: |
      #    set +x
      #    echo '${{ fromJson(steps.create_qua_env.outputs.response).status_code }}'

      - name: limit_qua_env_branches
        uses: indiesdev/curl@v1.1
        with:
          url: https://api.github.com/repos/bromba-noesis/${{ github.event.inputs.repoName }}/environments/Quality/deployment-branch-policies
          method: "POST"
          accept: 200, 303, 404
          headers: '{ "Accept": "application/vnd.github+json", "X-GitHub-Api-Version": "2022-11-28" }'
          bearer-token: ${{ secrets.BROMBA_NOESIS_PAT2 }}
          body: '{ "name": "release/**", "type": "branch" }'

      - name: limit_qua_env_tags
        uses: indiesdev/curl@v1.1
        with:
          url: https://api.github.com/repos/bromba-noesis/${{ github.event.inputs.repoName }}/environments/Quality/deployment-branch-policies
          method: "POST"
          accept: 200, 303, 404
          headers: '{ "Accept": "application/vnd.github+json", "X-GitHub-Api-Version": "2022-11-28" }'
          bearer-token: ${{ secrets.BROMBA_NOESIS_PAT2 }}
          body: '{ "name": "[0-9].[0-9].[0-9]", "type": "tag" }'

      - name: get_repo_id
        id: get_repo_id
        env:
          GH_TOKEN: ${{ secrets.BROMBA_NOESIS_PAT2 }}
        run: |
          repo_id=$(gh repo view bromba-noesis/${{ github.event.inputs.repoName }} --json id --jq '.id')
          echo "::set-output name=my_repo_id::$repo_id"

      - name: protect_release_branches
        id: protect_release_branches
        uses: indiesdev/curl@v1.1
        with:
          url: https://api.github.com/graphql
          method: "POST"
          bearer-token: ${{ secrets.BROMBA_NOESIS_PAT2 }}
         #body: " \ { \ \"query\": \"query { viewer { login }}\" \ } \ " #login query
         #body: " \ { \ \"query\": \"mutation CreateRepository($repositoryInput: CreateRepositoryInput!) { createRepository(input: $repositoryInput) { repository { id name url } } } \", \"variables\": { \"repositoryInput\": { \"name\": \"xxx\", \"visibility\": \"PUBLIC\" } } \ } \ " # create repo
          body: " \ { \ \"query\": \"mutation CreateBranchProtectionRule($branchProtectionRuleInput: CreateBranchProtectionRuleInput!) { createBranchProtectionRule(input: $branchProtectionRuleInput) { branchProtectionRule  { id } } } \", \"variables\": { \"branchProtectionRuleInput\": { \"repositoryId\": \"${{ steps.get_repo_id.outputs.my_repo_id }}\", \"pattern\": \"release/**\", \"requiresApprovingReviews\": true, \"requiredApprovingReviewCount\": 1 } } \ } \ "
          log-response: false
          timeout: 3000

      #- name: protect_release_branches_response
      #  run: |
      #    set +x
      #    echo ${{ steps.protect_release_branches.outputs.response }} 
