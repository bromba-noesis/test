name: test

on: 
    workflow_dispatch:

jobs:
  test1:
    runs-on: windows-latest
    outputs:
        libGroup-output: ${{ steps.versions.outputs.libGroup }}
        libArtifact-output: ${{ steps.versions.outputs.libArtifact }}
        libVersion-output: ${{ steps.versions.outputs.libVersion }}
    steps:
      - uses: actions/checkout@v3
    
      - name: versions 
        id: versions
        shell: pwsh
        run: |
          $x = [xml](gc pom.xml)

          $lgrp = $x.project.parent.groupId | fl | Out-String
          echo $lgrp

          $lart = $x.project.parent.artifactId | fl | Out-String
          echo $lart
          
          $lver = $x.project.parent.version | fl | Out-String
          echo $lver

          echo "libGroup=$lgrp" >> $Env:GITHUB_OUTPUT
          echo "libArtifact=$lart" >> $Env:GITHUB_OUTPUT
          echo "libVersion=$lver" >> $Env:GITHUB_OUTPUT

  test2:
    runs-on: ubuntu-latest
    needs: test1
    steps:
      #- uses: actions/checkout@v3
    
      #- name: check 
      #  if: ${{ hashFiles('README.md') != '' }}
      #  run: |
      #    echo README.md found!!!

      #- name: versions
      #  id: versions
      #  run: |
      #    echo -
          #echo "myVar=$(mvn help:evaluate -Dexpression=project.properties.revision -q -DforceStdout)" >> $GITHUB_ENV
          #echo "myVar=$(mvn help:evaluate -Dexpression=project.modelVersion -q -DforceStdout)" >> $GITHUB_ENV

      - name: show
        env:
          libGroup: ${{needs.test1.outputs.libGroup-output}}
          libArtifact: ${{needs.test1.outputs.libArtifact-output}}
          libVersion: ${{needs.test1.outputs.libVersion-output}}
        #run: echo ${{ env.libVersion }}
        run: |
          echo "libGroup: $libGroup"
          echo "libArtifact: $libArtifact"
          echo "libVersion: $libVersion"
